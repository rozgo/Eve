//---------------------------------------------------------------------------------------------------------------------   
using System;
//---------------------------------------------------------------------------------------------------------------------   


//---------------------------------------------------------------------------------------------------------------------   
// A delegate type for hooking up change notifications.
public delegate void TickEventHandler (object sender, EventArgs e);


//---------------------------------------------------------------------------------------------------------------------   
public abstract class TimerListener
{
 
//---------------------------------------------------------------------------------------------------------------------   
  public TimerListener (Timer timer)
  {
    m_timer = timer;
    m_timer.Tick += OnTick;
  }


//---------------------------------------------------------------------------------------------------------------------   
  // This will be called whenever the timer changes by m_tickThreshold
  protected virtual void OnTick (object sender, EventArgs e)
  {
  }
 
  
//---------------------------------------------------------------------------------------------------------------------   
  public void Detach ()
  {
    // Detach the event and delete the timer
    m_timer.Tick -= new TickEventHandler (OnTick);
    m_timer = null;
  }
  
  
//---------------------------------------------------------------------------------------------------------------------   
  protected Timer m_timer {get; private set;}
  
  
//---------------------------------------------------------------------------------------------------------------------   
}
//---------------------------------------------------------------------------------------------------------------------   
